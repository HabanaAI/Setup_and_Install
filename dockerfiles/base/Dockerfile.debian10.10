# Copyright (c) 2023 HabanaLabs, Ltd.
#
# SPDX-License-Identifier: Apache-2.0
#
# HabanaLabs Dockerfile base installer layer for Debian 10.10

FROM debian:10.10
ARG ARTIFACTORY_URL
ARG VERSION
ARG REVISION
ARG OPENMPI_VER=4.1.5

ENV DEBIAN_FRONTEND=noninteractive
ENV GC_KERNEL_PATH=/usr/lib/habanalabs/libtpc_kernels.so
ENV HABANA_LOGS=/var/log/habana_logs/
ENV OS_NUMBER=1010
ENV HABANA_SCAL_BIN_PATH=/opt/habanalabs/engines_fw
ENV HABANA_PLUGINS_LIB_PATH=/opt/habanalabs/habana_plugins

RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    curl \
    sudo \
    apt-transport-https \
    apt-utils \
    bc \
    build-essential \
    ca-certificates \
    dkms \
    ethtool \
    gcc \
    git \
    gnupg \
    gpg-agent \
    graphviz \
    libgl1 \
    libgoogle-glog0v5 \
    libjemalloc2 \
    libpq-dev \
    libsqlite3-dev \
    locales \
    lsof \
    make \
    openssh-client \
    openssh-server \
    libssl-dev \
    libffi-dev \
    protobuf-compiler \
    python3-dev \
    python3-pip \
    python3-tk \
    python3-venv \
    unzip \
    vim \
    zlib1g-dev \
    wget \
    libbz2-dev \
    lbzip2 \
    libtool \
    autoconf \
    libibverbs-dev \
    librdmacm-dev \
    libdrm-dev \
    liblzma-dev && \
    apt-get autoremove && apt-get clean

COPY install_efa.sh .
RUN ./install_efa.sh && rm install_efa.sh && rm -rf /etc/ld.so.conf.d/efa.conf /etc/profile.d/efa.sh

ENV LIBFABRIC_VERSION="1.20.0"
ENV LIBFABRIC_ROOT="/opt/habanalabs/libfabric-${LIBFABRIC_VERSION}"
ENV RDMA_CORE_ROOT=/opt/habanalabs/rdma-core/src
ENV RDMA_CORE_LIB=${RDMA_CORE_ROOT}/build/lib
ENV LD_LIBRARY_PATH=$LIBFABRIC_ROOT/lib:/usr/lib/habanalabs:$LD_LIBRARY_PATH
ENV PATH=${LIBFABRIC_ROOT}/bin:$PATH

# install openmpi
ENV MPI_ROOT="/usr/local/share/openmpi"
RUN wget -nv -P /tmp/openmpi "https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OPENMPI_VER}.tar.gz" && \
    cd /tmp/openmpi && tar xzf openmpi-${OPENMPI_VER}.tar.gz && \
    cd /tmp/openmpi/openmpi-${OPENMPI_VER} && \
    ./configure --prefix=${MPI_ROOT} --with-sge --disable-builtin-atomics --enable-orterun-prefix-by-default --with-verbs && \
    make -j 8 && \
    sudo make install && \
    cp LICENSE ${MPI_ROOT} && \
    rm -rf /tmp/openmpi
ENV PATH="${MPI_ROOT}/bin:$PATH"
ENV LD_LIBRARY_PATH=${MPI_ROOT}/lib:/usr/lib/habanalabs:$LD_LIBRARY_PATH
ENV PATH=${MPI_ROOT}/bin:$PATH
ENV OPAL_PREFIX=${MPI_ROOT}
ENV MPICC=${MPI_ROOT}/bin/mpicc

ENV FI_EFA_FORK_SAFE=1
ENV RDMAV_FORK_SAFE=1
ENV FI_EFA_USE_DEVICE_RDMA=1
ENV RDMA_CORE_ROOT=/opt/habanalabs/rdma-core/src
ENV RDMA_CORE_LIB=${RDMA_CORE_ROOT}/build/lib

RUN wget -nv -O /opt/Python-3.8.10.tgz https://www.python.org/ftp/python/3.8.10/Python-3.8.10.tgz && \
    cd /opt/ && \
    tar xzf Python-3.8.10.tgz && \
    rm -f Python-3.8.10.tgz && \
    cd Python-3.8.10 && \
    ./configure --enable-optimizations --enable-loadable-sqlite-extensions --enable-shared && \
    make && make altinstall
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && locale-gen

ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV LC_CTYPE=en_US.UTF-8


# There is no need to store pip installation files inside docker image
ENV PIP_NO_CACHE_DIR=on
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

RUN ln -sf /usr/include/libdrm /usr/include/drm

RUN echo "deb https://${ARTIFACTORY_URL}/artifactory/debian buster main" | tee -a /etc/apt/sources.list && \
    wget "https://${ARTIFACTORY_URL}/artifactory/api/gpg/key/public" && \
    apt-key add public && \
    rm public && \
    apt-get update && \
    apt-get install -y habanalabs-rdma-core="$VERSION"-"$REVISION" \
        habanalabs-thunk="$VERSION"-"$REVISION" \
        habanalabs-firmware-tools="$VERSION"-"$REVISION" \
        habanalabs-graph="$VERSION"-"$REVISION" && \
    apt-get autoremove --yes && apt-get clean && rm -rf /var/lib/apt/lists/* && \
    sed --in-place "/$ARTIFACTORY_URL/d" /etc/apt/sources.list

RUN wget -nv -O /tmp/libfabric-${LIBFABRIC_VERSION}.tar.bz2 https://github.com/ofiwg/libfabric/releases/download/v${LIBFABRIC_VERSION}/libfabric-${LIBFABRIC_VERSION}.tar.bz2 && \
    cd /tmp/ && tar xf /tmp/libfabric-${LIBFABRIC_VERSION}.tar.bz2 && \
    cd /tmp/libfabric-${LIBFABRIC_VERSION} && \
    ./configure --prefix=$LIBFABRIC_ROOT --enable-psm3-verbs --enable-verbs=yes --with-synapseai=/usr && \
    make && make install && cd / && rm -rf /tmp/libfabric-${LIBFABRIC_VERSION}.tar.bz2 /tmp/libfabric-${LIBFABRIC_VERSION}

RUN wget -nv -O /tmp/main.zip https://github.com/HabanaAI/hccl_ofi_wrapper/archive/refs/heads/main.zip && \
    unzip /tmp/main.zip -d /tmp && \
    cd /tmp/hccl_ofi_wrapper-main && \
    make && cp -f libhccl_ofi_wrapper.so /usr/lib/habanalabs/libhccl_ofi_wrapper.so && \
    cd / && \
    rm -rf /tmp/main.zip /tmp/hccl_ofi_wrapper-main

RUN update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.8 2 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1

RUN python3 -m pip install pip==23.3.1 setuptools==67.3.3 wheel==0.38.4

RUN python3 -m pip install habana_media_loader=="${VERSION}"."${REVISION}"

# SSH configuration necessary to support mpi-operator v2
RUN mkdir -p /var/run/sshd && \
    sed -i 's/[ #]\(.*StrictHostKeyChecking \).*/ \1no/g' /etc/ssh/ssh_config && \
    sed -i 's/#\(ForwardAgent \).*/\1yes/g' /etc/ssh/ssh_config && \
    echo "    UserKnownHostsFile /dev/null" >> /etc/ssh/ssh_config && \
    sed -i 's/#\(StrictModes \).*/\1no/g' /etc/ssh/sshd_config && \
    echo "/etc/init.d/ssh start \"-p 3022\"" >> ~/.bashrc && \
    sed -i '/[ -z "$PS1" ] && return/s/^/#/g' ~/.bashrc