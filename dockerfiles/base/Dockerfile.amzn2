# Copyright (c) 2023 Habana Labs, Ltd.
#
# SPDX-License-Identifier: Apache-2.0
#
# HabanaLabs Dockerfile base installer layer for Amazon Linux 2
FROM amazonlinux:2
ARG ARTIFACTORY_URL
ARG VERSION
ARG REVISION

RUN amazon-linux-extras enable python3.8 && \
    yum update -y && yum install -y \
    git \
    unzip \
    ethtool-4.8-10.amzn2.x86_64 \
    openssh-clients \
    openssh-server \
    python38 \
    python38-devel \
    python38-pip \
    python38-tkinter \
    which \
    wget \
    lsof \
    tar \
    mesa-libGL && \
    yum clean all && rm -rf /var/cache/yum

# Install jemalloc-3.6.0-1.el7.x86_64 package with required /lib64/libjemalloc.so.1 lib need for topologies
RUN yum install -y https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-14.noarch.rpm && \
    yum install -y jemalloc && \
    yum clean all && rm -rf /var/cache/yum

# Install development tools and cmake for habana-horovod compilation sdist package
RUN yum groupinstall -y "Development Tools"
RUN yum install -y sudo system-lsb-core cmake

COPY install_efa.sh .
RUN ./install_efa.sh && rm install_efa.sh

ENV MPI_ROOT=/opt/amazon/openmpi
ENV LD_LIBRARY_PATH=${MPI_ROOT}/lib:/opt/amazon/efa/lib64:/usr/lib/habanalabs:$LD_LIBRARY_PATH
ENV PATH=${MPI_ROOT}/bin:/opt/amazon/efa/bin:$PATH
ENV OPAL_PREFIX=${MPI_ROOT}
ENV MPICC=${MPI_ROOT}/bin/mpicc
ENV FI_EFA_FORK_SAFE=1
ENV RDMAV_FORK_SAFE=1
ENV FI_EFA_USE_DEVICE_RDMA=1

RUN echo "[habanalabs]" > /etc/yum.repos.d/habanalabs.repo && \
    echo "name=Habana AWS Linux repo" >> /etc/yum.repos.d/habanalabs.repo && \
    echo "baseurl=https://${ARTIFACTORY_URL}/artifactory/AmazonLinux2" >> /etc/yum.repos.d/habanalabs.repo && \
    echo "gpgkey=https://${ARTIFACTORY_URL}/artifactory/AmazonLinux2/repodata/repomd.xml.key" >> /etc/yum.repos.d/habanalabs.repo

RUN yum install -y habanalabs-rdma-core-"$VERSION"-"$REVISION".amzn2 && \
    yum install -y habanalabs-thunk-"$VERSION"-"$REVISION".amzn2 && \
    yum install -y habanalabs-firmware-tools-"$VERSION"-"$REVISION".amzn2 && \
    yum install -y habanalabs-graph-"$VERSION"-"$REVISION".amzn2

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1

RUN rm -f /etc/yum.repos.d/habanalabs.repo && \
    yum clean all && rm -rf /var/cache/yum

# SSH configuration necessary to support mpi-operator v2
RUN sed -i 's/[ #]\(.*StrictHostKeyChecking \).*/ \1no/g' /etc/ssh/ssh_config && \
    sed -i 's/[ #]\(.*ForwardAgent \).*/ \1yes/g' /etc/ssh/ssh_config && \
    echo "    UserKnownHostsFile /dev/null" >> /etc/ssh/ssh_config && \
    sed -i 's/#\(StrictModes \).*/\1no/g' /etc/ssh/sshd_config && \
    ssh-keygen -A && \
    mkdir -p /var/run/sshd && echo "/usr/sbin/sshd -p 3022" | tee -a ~/.bashrc

# There is no need to store pip installation files inside docker image
ENV PIP_NO_CACHE_DIR=on
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

RUN python3 -m pip install pip==22.2.2 setuptools==67.3.3 wheel==0.38.4

RUN python3 -m pip install habana_media_loader=="${VERSION}"."${REVISION}"

RUN echo "export LANG=en_US.UTF-8" >> /root/.bashrc
RUN export LANG=en_US.UTF-8
ENV GC_KERNEL_PATH=/usr/lib/habanalabs/libtpc_kernels.so
ENV HABANA_LOGS=/var/log/habana_logs/
ENV HABANA_SCAL_BIN_PATH=/opt/habanalabs/engines_fw
ENV HABANA_PLUGINS_LIB_PATH=/opt/habanalabs/habana_plugins